require 'test/unit/ui/console/testrunner'
require './binary_test.rb'

#def chop will return the index of the array that a specific search term lives at
def chop_old(int, arr_of_int)
  if arr_of_int.empty?
    puts 'ZERO ARRAY LENGTH'
    return -1
  else
    lower = 0
    return lower if arr_of_int[lower] == int
    upper = arr_of_int.length - 1
    return upper if arr_of_int[upper] == int

    found = -1
    while (1) #found != int 
      #go through the loop
      mid = ((upper+lower)/2.0).floor
      puts mid
      puts "mid6 = #{lower} < #{mid} < #{upper}"
      if (upper == mid)
        if (arr_of_int[upper] == int)
          puts "MID == UPPER so returning mid"
          return upper
        else
          return -1
        end
      elsif (lower == mid)
        if (arr_of_int[lower] == int)
          puts "MID == LOWER so returning mid"
          return lower
        else
          return -1
        end
      end
      if (arr_of_int[mid] > int)
        upper = mid
        puts "mid1 = #{lower} < #{mid} < #{upper}"
      elsif (arr_of_int[mid] < int)
        lower = mid
        puts "mid2 = #{lower} < #{mid} < #{upper}"
      else
        puts "Found @ mid -> #{mid}"
        return mid
      end

      if (upper == lower) 
        puts "arr_of_int = #{arr_of_int[lower]}"
        puts "arr_of_int = #{arr_of_int[upper]}"
        if (arr_of_int[lower] == int)
          return lower
        elsif (arr_of_int[upper] == int)
          return upper
        else
          return -1
        end
      else
        found = int
        puts "found = #{found}"
      end
    end
  end
  return mid
end

def chop(int, arr_of_int, start_idx=0)
  #We want to return -1 if the array is empty
  return -1 if arr_of_int.empty?
  #Return start idx (as we may be taking in a sliced array with non-zero start term
  return start_idx if arr_of_int[0] == int
  #Return end idx of split array
  return start_idx+arr_of_int.length if arr_of_int[-1] == int
  #Now decide which half of the split to look at and call chop on it again
  #Floor the midway point
  split_point = (arr_of_int.length/2.0).floor
  if arr_of_int[split_point] < int
    chop(int,arr_of_int[(split_point...arr_of_int.length)], split_point)
  else
    chop(int,arr_of_int[(0...split_point)], 0)
  end
end

Test::Unit::UI::Console::TestRunner.run(BinSearchTest)
